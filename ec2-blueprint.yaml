tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.1/types.yaml
  - http://www.getcloudify.org/spec/libcloud-plugin/1.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.1/plugin.yaml
  - types/nodecellar.yaml

inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  size_name:
    description: >
      Flavor of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's

node_types:

  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.libcloud.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
      server:
        description: >
          Server definitions like image and size.
    interfaces:
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                CPUCollector: {}
                MemoryCollector: {}
                LoadAverageCollector: {}
                DiskUsageCollector: {}

node_templates:

  mongod_vm:
    type: nodecellar.nodes.MonitoredServer
    properties:
      server:
        image_name: { get_input: image }
        size_name: { get_input: size_name }
        security_groups: ['mongod_security_group']

  nodejs_vm:
    type: nodecellar.nodes.MonitoredServer
    properties:
      server:
        image_name: { get_input: image }
        size_name: { get_input: size_name }
        security_groups: ['nodecellar_security_group']
    relationships:
      - target: floatingip
        type: cloudify.libcloud.server_connected_to_floating_ip

  mongod:
    type: nodecellar.nodes.MongoDatabase
    properties:
      port: 27017
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/mongo/install-pymongo.sh
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                MongoDBCollector:
                  config:
                    hosts: "localhost:27017"
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_vm

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_vm

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: 8080
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs

  nodecellar_security_group:
    type: cloudify.libcloud.nodes.SecurityGroup
    properties:
      resource_id: nodecellar_security_group
      description: Nodecellar security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ nodecellar, port ] }

  mongod_security_group:
    type: cloudify.libcloud.nodes.SecurityGroup
    properties:
      resource_id: mongod_security_group
      description: MongoDB security group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ mongod, port ] }
        - remote_ip_prefix: 0.0.0.0/0
          port: 28017

  floatingip:
    type: cloudify.libcloud.nodes.FloatingIP

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodejs_vm, ip ] }
      port: { get_property: [ nodecellar, port ] }
