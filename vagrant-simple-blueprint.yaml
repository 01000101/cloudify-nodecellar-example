tosca_definitions_version: cloudify_dsl_1_2

description: >
  This Blueprint installs the nodecellar application
  on an existing host.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4m4/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.2/plugin.yaml
  - types/nodecellar.yaml
  - types/simple-types.yaml
  - /home/david/cloudify-vagrant-plugin/plugin.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  agent_user:
      description: >
        User name used when SSH-ing into the started machine

  agent_private_key_path:
      description: >
        Path to a private key that resided on the management machine.
        SSH-ing into agent machines will be done with this key.

  vbox:
    description: VBox box URL or shortened name

  vm_name_prefix:
    description: Virtual machine's display name

  vm_cpus:
    description: Amount of CPUs to be used by the virtual machine

  vm_memory:
    description: Amount of memory to be used by the virtual machine

  ip:
    description: >
      The IPv4 address which the virtual machine will be configured with.
      Provide a CIDR to automatically generate an IP by the CIDR.

  additional_vagrant_settings:
    description: >
      Accepts a dictionary with vagrant config parameters. The key and
      values will be printed into the Vagrant file as "key= value", at the
      vagrant machine configuration part.
      Note: Make sure you use 'config.' as the prefix of the configuration key.
  additional_virtualbox_settings:
    description: >
          Accepts a dictionary with vagrant config parameters. The key and
          values will be printed into the Vagrant file as "key= value", at
          the virtualbox machine configuration part.
          Note: Make sure you use 'vbox.' as the prefix of the configuration
          key.
  provision_sets:
    description:
    # TODO add description

node_templates:

  mongod_vm:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: ip }
    instances:
      deploy: 2
    interfaces:
        cloudify.interfaces.lifecycle:
            start:
                implementation: vagrant.vagrant_plugin.vbox.tasks.start
                inputs:
                  vbox: { get_input: vbox }
                  vm_name_prefix: { get_input: vm_name_prefix }
                  vm_cpus: { get_input: vm_cpus }
                  vm_memory: { get_input: vm_memory }
                  additional_vagrant_settings: {}
                  additional_virtualbox_settings: {}
                  provision_sets: { get_input: provision_sets }

  nodejs_vm:
    type: cloudify.nodes.Compute
    properties:
          ip: {}
    interfaces:
        cloudify.interfaces.lifecycle:
            start:
                implementation: vagrant.vagrant_plugin.vbox.tasks.start
                inputs:
                  vbox: { get_input: vbox }
                  vm_name_prefix: { get_input: vm_name_prefix }
                  vm_cpus: { get_input: vm_cpus }
                  vm_memory: { get_input: vm_memory }
                  additional_vagrant_settings: {}
                  additional_virtualbox_settings: {}
                  provision_sets: {}
  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            postconfigure:
              inputs:
                mongo_ip_address: { get_attribute: [mongod_vm, ip_address]}

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_vm

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_vm

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodejs_vm, ip_address ] }
      port: { get_property: [ nodecellar, port ] }
