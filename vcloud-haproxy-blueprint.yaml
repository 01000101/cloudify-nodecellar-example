###########################################################
# This Blueprint installs the nodecellar application behind
# an haproxy instance on an vcloud cloud environment.
###########################################################

tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2m6/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.2m6/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/1.2-build/plugin.yaml
  - types/nodecellar.yaml
  - types/haproxy.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.yaml
#####################################################################################

inputs:

  catalog:
    description: >
      The vCloud catalog
    default: ''

  template:
    description: >
      The vCloud template
    default: ''

  agent_user:
    description: >
      User name used when SSH-ing into the started machine
    default: ubuntu

  management_network_name:
    description: >
      Name of the network that will be used for Cloudify management
    type: string

  floating_ip_gateway:
    description: >
      The edge gateway ID
    type: string

  server_cpu:
    default: 2
    description: >
      cpu count for each server

  server_memory:
    default: 4096
    description: >
      memory amount for each server

  agent_public_key:
    type: string

node_types:

  nodecellar.nodes.Server:
    derived_from: cloudify.vcloud.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      server:
        default:
          catalog: { get_input: catalog }
          template: { get_input: template }
          hardware:
            cpu: { get_input: server_cpu }
            memory: { get_input: server_memory }
          guest_customization:
            public_keys:
              -
               key:  { get_input: agent_public_key }
               user: { get_input: agent_user }
      management_network:
        default: { get_input: management_network_name }

node_templates:

  mongod_host:
    type: nodecellar.nodes.Server

  nodejs_host:
    type: nodecellar.nodes.Server

    ###########################################################
    # Setting the nodejs_host initial number of instances to 2.
    # The default values for instances.deploy is 1.
    ###########################################################

    instances:
      deploy: 2

  haproxy_frontend_host:
    type: nodecellar.nodes.Server
    relationships:

      ###########################################################
      # Attaching a floating ip to the haproxy frontend host
      ###########################################################

      - type: cloudify.vcloud.server_connected_to_floating_ip
        target: frontend_floatingip

      ###########################################################
      # Attaching the haproxy frontend security group to
      # the haproxy frontend host
      ###########################################################

#      - type: cloudify.vcloud.server_connected_to_security_group
#        target: haproxy_frontend_security_group

  mongod:
    type: nodecellar.nodes.MongoDatabase
    properties:
      port: 27017
    interfaces:
      cloudify.interfaces.lifecycle:

        ###########################################################
        # The MongoDBCollector depends on a python library called
        # pymongo. We install this library in the 'configure'
        # lifecycle hook of this node.
        ###########################################################

        configure: scripts/mongo/install-pymongo.sh

      ###########################################################
      # Notice that this node defines an additional collector
      # to collect data on the MongoDB.
      ###########################################################

#      cloudify.interfaces.monitoring:
#          start:
#            implementation: diamond.diamond_agent.tasks.add_collectors
#            inputs:
#              collectors_config:
#                MongoDBCollector:
#                  config:
#                    hosts: localhost:27017
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: 8080
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

      ################################
      # Setting the haproxy connection
      ################################

      - type: app_connected_to_haproxy
        target: haproxy


  ########################################
  # Note: only ubuntu haproxy installation
  # is supported.
  ########################################

  haproxy:
    type: haproxy.nodes.Proxy
    properties:

      ###########################################################
      # This is the port that will be used by haproxy.
      ###########################################################
      frontend_port: 80

      ###########################################################
      # This is the port that will be used by haproxy to display
      # statistics.
      ###########################################################
      statistics_port: 9000

      backend_app_port: { get_property: [ nodecellar, port ] }

    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in
#    interfaces:

      ###########################################################
      # Notice that this node defines an additional collector
      # to collect data on the haproxy instance.
      # Also notice that in the URL, port 9000 is used. If you
      # choose to change this port on the haproxy node template,
      # this URL should be updated as well.
      ###########################################################

#      cloudify.interfaces.monitoring:
#          start:
#            implementation: diamond.diamond_agent.tasks.add_collectors
#            inputs:
#              collectors_config:
#                HAProxyCollector:
#                  config:
#                    url: http://127.0.0.1:9000/haproxy_stats;csv


  ###########################################################
  # A security group to enable access to the nodejs host
  # using the port of the nodecellar application.
  #
  # This security group will be attached to the nodejs_host
  ###########################################################

#  nodecellar_security_group:
#    type: cloudify.vcloud.nodes.SecurityGroup
#    properties:
#      rules:
#        - protocol: Tcp
#          port: { get_property: [ nodecellar, port ] }
#          description: nodejsPort

  ###########################################################
  # A security group to enable access to the mongo host
  # using the port of the mongo node.
  #
  # We need this so that the nodecellar application can
  # comminicate with MongoDB, since they are running on
  # different hosts.
  ###########################################################

#  mongod_security_group:
#    type: cloudify.vcloud.nodes.SecurityGroup
#    properties:
#      rules:
#        - protocol: 'Tcp'
#          port: { get_property: [ mongod, port ] }
#          description: mondoPort1
#        - protocol: 'Tcp'
#          port: 28017
#          description: mondoPort2

  ###########################################################
  # A security group to enable access to the haproxy frontend
  # host using the haproxy frontend_port property.
  # In addition, we open the statistics port (9000) of haproxy
  #
  # This security group will be attached to the
  # haproxy_frontend_host
  ###########################################################

#  haproxy_frontend_security_group:
#    type: cloudify.vcloud.nodes.SecurityGroup
#    properties:
#      rules:
#        - protocol: 'Tcp'
#          port: { get_property: [ haproxy, frontend_port ] }
#          description: frontendPort
#        - protocol: 'Tcp'
#          port: { get_property: [ haproxy, statistics_port ]}
#          description: statisticsPort
#    relationships:
#       - target: frontend_floatingip
#         type: cloudify.relationships.depends_on

  ###########################################################
  # A floating ip to be tatached to the haproxy frontend host,
  # since eventually we want to be able to access the application
  # from any machine, on any network.
  ###########################################################

  frontend_floatingip:
    type: cloudify.vcloud.nodes.FloatingIP
    properties:
      floatingip:
        edge_gateway: { get_input: floating_ip_gateway }

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ frontend_floatingip, public_ip ] }
      port: { get_property: [haproxy, frontend_port] }
